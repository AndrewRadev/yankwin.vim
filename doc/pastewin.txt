*pastewin.txt*	Yank and paste windows around

==============================================================================
CONTENTS                                        *pastewin*   *pastewin-contents*

    Installation................................: |pastewin-installation|
    Usage.......................................: |pastewin-usage|
    Settings....................................: |pastewin-settings|
    Issues......................................: |pastewin-issues|


==============================================================================
INSTALLATION                                            *pastewin-installation*

There are several ways to install the plugin. The recommended one is by using
Tim Pope's pathogen (http://www.vim.org/scripts/script.php?script_id=2332). In
that case, you can clone the plugin's git repository like so:
>
    git clone https://github.com/AndrewRadev/pastewin.vim ~/.vim/bundle/pastewin
<
If your vim configuration is under git version control, you could also set up
the repository as a submodule, which would allow you to update more easily.
The command is (provided you're in ~/.vim):
>
    git submodule add https://github.com/AndrewRadev/pastewin.vim bundle/pastewin
<

Another way is to simply copy all the essential directories inside the ~/.vim
directory: autoload, doc, plugin.


==============================================================================
USAGE                                                          *pastewin-usage*

TODO


TODO Describe mapping conflicts


==============================================================================
SETTINGS                                                    *pastewin-settings*

                                                   *g:pastewin_default_mappings*
>
    let g:pastewin_default_mappings = 0
<
Default value: 1

Set this to 0 to disable the built-in mappings, allowing you to set your own.
Here's a complete list of them -- change the left-hand sides to whatever set
of mappings you prefer:
>
    nnoremap <c-w>d  :call pastewin#Delete({'path_type': 'relative', 'with_line_number': 0})<cr>
    nnoremap <c-w>gd :call pastewin#Delete({'path_type': 'absolute', 'with_line_number': 0})<cr>
    nnoremap <c-w>D  :call pastewin#Delete({'path_type': 'relative', 'with_line_number': 1})<cr>
    nnoremap <c-w>gD :call pastewin#Delete({'path_type': 'absolute', 'with_line_number': 1})<cr>

    nnoremap <c-w>y  :call pastewin#Yank({'path_type': 'relative', 'with_line_number': 0})<cr>
    nnoremap <c-w>gy :call pastewin#Yank({'path_type': 'absolute', 'with_line_number': 0})<cr>
    nnoremap <c-w>Y  :call pastewin#Yank({'path_type': 'relative', 'with_line_number': 1})<cr>
    nnoremap <c-w>gY :call pastewin#Yank({'path_type': 'absolute', 'with_line_number': 1})<cr>

    nnoremap <c-w><c-p> :call pastewin#Paste({'edit_command': 'edit'})<cr>
    nnoremap <c-w>p     :call pastewin#Paste({'edit_command': 'leftabove split'})<cr>
    nnoremap <c-w>P     :call pastewin#Paste({'edit_command': 'rightbelow split'})<cr>
    nnoremap <c-w>gp    :call pastewin#Paste({'edit_command': '-tab split'})<cr>
    nnoremap <c-w>gP    :call pastewin#Paste({'edit_command': 'tab split'})<cr>
<

                                            *g:pastewin_default_delete_mappings*
>
    let g:pastewin_default_delete_mappings = 0
<
Default value: 1

Set this to 0 to disable the built-in mappings for deleting, allowing you to
set your own. Here's a complete list of them -- change the left-hand sides to
whatever set of mappings you prefer:
>
    nnoremap <c-w>d  :call pastewin#Delete({'path_type': 'relative', 'with_line_number': 0})<cr>
    nnoremap <c-w>gd :call pastewin#Delete({'path_type': 'absolute', 'with_line_number': 0})<cr>
    nnoremap <c-w>D  :call pastewin#Delete({'path_type': 'relative', 'with_line_number': 1})<cr>
    nnoremap <c-w>gD :call pastewin#Delete({'path_type': 'absolute', 'with_line_number': 1})<cr>
<

                                              *g:pastewin_default_yank_mappings*
>
    let g:pastewin_default_yank_mappings = 0
<
Default value: 1

Set this to 0 to disable the built-in yank mappings, allowing you to set your
own. Here's a complete list of them -- change the left-hand sides to whatever
set of mappings you prefer:
>
    nnoremap <c-w>y  :call pastewin#Yank({'path_type': 'relative', 'with_line_number': 0})<cr>
    nnoremap <c-w>gy :call pastewin#Yank({'path_type': 'absolute', 'with_line_number': 0})<cr>
    nnoremap <c-w>Y  :call pastewin#Yank({'path_type': 'relative', 'with_line_number': 1})<cr>
    nnoremap <c-w>gY :call pastewin#Yank({'path_type': 'absolute', 'with_line_number': 1})<cr>
<
                                             *g:pastewin_default_paste_mappings*
>
    let g:pastewin_default_paste_mappings = 0
<
Default value: 1

Set this to 0 to disable the built-in paste mappings, allowing you to set your own.
Here's a complete list of them -- change the left-hand sides to whatever set
of mappings you prefer:
>
    nnoremap <c-w><c-p> :call pastewin#Paste({'edit_command': 'edit'})<cr>
    nnoremap <c-w>p     :call pastewin#Paste({'edit_command': 'leftabove split'})<cr>
    nnoremap <c-w>P     :call pastewin#Paste({'edit_command': 'rightbelow split'})<cr>
    nnoremap <c-w>gp    :call pastewin#Paste({'edit_command': '-tab split'})<cr>
    nnoremap <c-w>gP    :call pastewin#Paste({'edit_command': 'tab split'})<cr>
<
Note that you can create a different mapping by providing a different
"edit_command" to the `pastewin#Paste` function. If you wanted to create
mappings to paste in a vertical split, you could add something like this to
your vimrc:
>
    nnoremap <c-w>vp :call pastewin#Paste({'edit_command': 'leftabove vertical split'})<cr>
    nnoremap <c-w>vP :call pastewin#Paste({'edit_command': 'rightbelow vertical split'})<cr>
<

                                           *g:pastewin_only_allow_pasting_paths*
>
    let g:pastewin_only_allow_pasting_paths = 0
<
Default value: 1

If this is set to 1 (the default), the plugin will try to guard you from
accidentally pasting something that isn't a filename. If the contents of the
register you're pasting from don't look like a filename (Using the 'isfname'
pattern), the plugin will error out. If this is unreliable for you for some
reason, set it to 0 to disable the check (and consider opening an issue).


                                                   *g:pastewin_paste_processors*
>
    let g:pastewin_paste_processors = {
        \ '\(file\):\(line\):\(col\)': {'path': '\1', 'line': '\2', 'col': '\3'}
        \ }
<
This |dict| contains a set of patterns to match the incoming file path to. If
any of the patterns matches, the dict it points is used to get the path,
linenumber and column to jump to.

As an example, if you'd like to paste a filepath like "filename.rb:5:2", which
would point to the 2nd column of the 5th line of "filename.rb", the plugin
will parse that and jump to that location in that file. This is done by using
a substition like the above.

The pattern for that is: `^\(.\{-}\):\(\d\+\)\%(:\(\d\+\)\)\?`

This might seem a bit weird if you're not used to Vim-flavored regex, but
it is what it is.

If you'd rather the plugin didn't try to be smart, you can set this variable
to `{}` to avoid any kind of processing on the pasted file path. If you'd like
to use the existing patterns, and add to them, use the setting
|g:pastewin_custom_paste_processors|


                                            *g:pastewin_custom_paste_processors*
>
    let g:pastewin_custom_paste_processors = {
        \ '\(file\):\(line\):\(col\)': {'path': '\1', 'line': '\2', 'col': '\3'}
        \ }
<
Default value: {}

If you'd like to use the built-in paste processors, and add some of your own,
you can use this variable. For the syntax of the patterns, either take a look
at the source code in `plugin/pastewin.vim`, or read above in the explanation
for |g:pastewin_paste_processors| (ideally, both).


==============================================================================
ISSUES                                                        *pastewin-issues*

Any issues and suggestions are very welcome on the github bugtracker:
https://github.com/AndrewRadev/pastewin.vim/issues


vim:tw=78:sw=4:ft=help:norl:
