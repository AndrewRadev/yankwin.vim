*yankwin.txt*	Yank and paste windows around

==============================================================================
CONTENTS                                            *yankwin*   *yankwin-contents*

    Installation................................: |yankwin-installation|
    Usage.......................................: |yankwin-usage|
    Why?........................................: |yankwin-why|
    Settings....................................: |yankwin-settings|
    Issues......................................: |yankwin-issues|


==============================================================================
INSTALLATION                                              *yankwin-installation*

There are several ways to install the plugin. The recommended one is by using
Tim Pope's pathogen (http://www.vim.org/scripts/script.php?script_id=2332). In
that case, you can clone the plugin's git repository like so:
>
    git clone https://github.com/AndrewRadev/yankwin.vim ~/.vim/bundle/yankwin
<
If your vim configuration is under git version control, you could also set up
the repository as a submodule, which would allow you to update more easily.
The command is (provided you're in ~/.vim):
>
    git submodule add https://github.com/AndrewRadev/yankwin.vim bundle/yankwin
<
Another way is to simply copy all the essential directories inside the ~/.vim
directory: autoload, doc, plugin.


==============================================================================
USAGE                                                            *yankwin-usage*

This plugin provides a set of mappings to delete, yank, and paste windows in
a similar way that normal text is yanked and pasted around. This is done
simply by yanking the window's path in the given register (which means this
doesn't really work for special buffers like the quickfix window).

All the mappings are prefixed with <c-w> and attempt to be consistent both
internally and with similar mappings in Vim. For instance, if you wanted to
move a buffer from one tab to the other, you could delete it from its location
with <c-w>d and then paste it in the right tab with <c-w>p.

Note that some of these mappings override built-ins! The following mappings
already exist:

- |CTRL-W_d|      -> Opens a new window with the definition of the current macro
- |CTRL-W_CTRL-P| -> Goes to the last-accessed window
- |CTRL-W_p|      -> Goes to the last-accessed window
- |CTRL-W_P|      -> Goes to the preview window

If these mappings are important to your workflow, you can disable the
overrides, either by setting |g:yankwin_default_mappings| to 0, or by setting
any of |g:yankwin_default_paste_mappings|, |g:yankwin_default_yank_mappings|, or
|g:yankwin_default_delete_mappings| to 0.

For example, if you only care about the yank mappings (which, I find, can be
quite useful on their own), you can put this in your .vimrc:
>
    let g:yankwin_default_yank_mappings   = 1 " optional
    let g:yankwin_default_paste_mappings  = 0
    let g:yankwin_default_delete_mappings = 0
<
Check the full documentation for these settings to learn how to define your
own, any way you like. If you have a proposal for a better set of window
mappings that don't override existing ones (or override ones that are not as
useful), feel free to open an issue at
https://github.com/AndrewRadev/yankwin.vim/issues.

Yanking and deleting ~

The only difference between deleting and yanking is whether the window is
closed after it's yanked. If you're currently on the fifth line in the file
"foo/bar.txt" in your home directory, "/home/me", then the provided mappings
would yank the following into the unnamed register:

- <c-w>y  -> foo/bar.txt
- <c-w>gy -> /home/me/foo/bar.txt
- <c-w>Y  -> foo/bar.txt:5
- <c-w>gY -> /home/me/foo/bar.txt:5

Basically, a lowercase "y" copies the (relative) path, and an uppercase "Y"
copies a path with its file number at the end (this was made to be consistent
with |gf| and |gF|). Prefixing with "g" yanks an absolute path instead of a
relative one.

In order to disable the built-in yank mappings and use your own, see the
documentation for |g:yankwin_default_yank_mappings|.

Deleting has a similar set of mappings with "d" instead of "y":

- <c-w>d  -> foo/bar.txt
- <c-w>gd -> /home/me/foo/bar.txt
- <c-w>D  -> foo/bar.txt:5
- <c-w>gD -> /home/me/foo/bar.txt

In order to disable the built-in delete mappings and use your own, see the
documentation for |g:yankwin_default_yank_mappings|.

Pasting ~

The mappings to paste a file path are slightly different than the
yanking/deleting ones, since there's a lot of options where to put the window
-- in a split, in a new tab, or in the current buffer. Here's the built-in
ones:

- <c-w><c-p> -> Pastes in the current window (replaces the window)
- <c-w>p     -> Pastes in a horizontal split below
- <c-w>P     -> Pastes in a horizontal split above
- <c-w>gp    -> Pastes in a new tab page, after the current one
- <c-w>gP    -> Pastes in a new tab page, before the current one

Note that there are some conflicts with potentially interesting mappings. You
might want to read the documentation for |g:yankwin_default_paste_mappings|
to learn how to disable these and define your own. You can even define new
ones that are not built-in, like ones that open windows in vertical splits.

Terminal windows~

Terminal windows only have `<c-w>d` and `<c-w>y` defined, since line numbers
and absolute/relative paths don't really make sense there. "Deleting" a
terminal window will only hide it, and "pasting" will show the buffer in a
window with your preferred position. So, unlike normal windows, you can't take
the path that corresponds to it, but you can still reorder a terminal window
the same way, with the same mappings.

Pasting, however, includes the full complement of mappings, since you should
be able to paste anything above, below, etc, a terminal window.

Registers ~

All mappings respect the provided register. For example, typing "a<c-w>y will
yank the current filename to the "a" register. The |clipboard| setting should
also be fully respected, so yanking and pasting files from and to the
clipboard should work just fine.

If you'd like to yank to both clipboards by default, you could set the
`clipboard` setting to "unnamed,unnamedplus", but that forces you to always
paste from "+", which can be inconvenient. You can override the setting for
"clipboard" on yank by using the |g:yankwin_yank_clipboard| setting:

>
    " yank to both clipboards:
    let g:yankwin_yank_clipboard = 'unnamed,unnamedplus'

    " but paste from "*"
    set clipboard=unnamed
<

Paste processors ~

One of the reasons this plugin was created was to enable pasting file paths in
different formats, potentially from outside sources into Vim. The plugin
provides two settings, |g:yankwin_paste_processors| and
|g:yankwin_custom_paste_processors|, that contain a set of definitions for
some pre-paste processing of any file paths that are pasted.

By default, pasting a file path that looks like "<filename>:<line>:<column>"
will not only open that file, but also jump to the provided line and column.
This can be useful when copying a file path from test output, for instance.

Also by default, pasting a github url (something that looks like
"http://github.com/blob/<path>#L<line>") will extract the file path and open
it in the given line (if there is one).

If you have ideas for additional processors that might be interesting, you can
make them yourself using |g:yankwin_custom_paste_processors|, and/or you
could open a github issue with your proposal.


==============================================================================
WHY                                                                *yankwin-why*

A lot of the use cases for this plugin can be replicated with built-ins. For
instance, if you wanted to "delete" a window from a split and "paste" it in a
new tab, you could do that with |CTRL-W_T|, which is even shorter than the
using the plugin mappings. If you wanted to swap two windows by "deleting" the
first one and then "pasting" it after the second one, you could just do it
with |CTRL-W_x|

So why use this plugin instead? Here's a few reasons:

1. A consistent interface. The default set of mappings is internally
   consistent and easy to remember and apply. It's similar to the existing
   workflow of deleting/yanking/pasting text, which might make it nicer to
   work with than remembering a different mapping for every use case.

2. Yanking file paths. To my knowledge, there's no built-in mapping to yank a
   file path, short of running something like `:let @+ = expand('%:p')`, which
   is quite verbose. The plugin provides various ways to yank file paths for
   usage with external programs (like, say, running tests on this particular
   test file, in this particular line).

3. Paste processors. For instance, if you copy a file's github url, you can
   easily open it locally with <c-w><c-p>.

To generalize on point 2, some of the mappings provided just don't have easy
analogs within the built-ins. Moving a window from a split to a separate tab
is easy with |CTRL-W_T|, as pointed out above, but the opposite is not that
easy, because there's no simple way to specify where the split should go. In
this case, "deleting" the tab page leaves you one "paste" mapping away from
putting it wherever you like.

The plugin is not complicated, however. If you take a look at the settings,
you'll find a full list of the mappings, which simply call a set of autoloaded
functions with (hopefully) easy-to-read parameter names. You can disable all
mappings and just use these functions in your own commands or mappings.


==============================================================================
SETTINGS                                                      *yankwin-settings*

                                                    *g:yankwin_default_mappings*
>
    let g:yankwin_default_mappings = 0
<
Default value: 1

Set this to 0 to disable the built-in mappings, allowing you to set your own.
Here's a complete list of them -- change the left-hand sides to whatever set
of mappings you prefer:
>
    nnoremap <c-w>d  :call yankwin#Delete({'path_type': 'relative', 'with_line_number': 0})<cr>
    nnoremap <c-w>gd :call yankwin#Delete({'path_type': 'absolute', 'with_line_number': 0})<cr>
    nnoremap <c-w>D  :call yankwin#Delete({'path_type': 'relative', 'with_line_number': 1})<cr>
    nnoremap <c-w>gD :call yankwin#Delete({'path_type': 'absolute', 'with_line_number': 1})<cr>

    tnoremap <c-w>d  <c-w>:call yankwin#Delete({'path_type': 'terminal'})<cr>

    nnoremap <c-w>y  :call yankwin#Yank({'path_type': 'relative', 'with_line_number': 0})<cr>
    nnoremap <c-w>gy :call yankwin#Yank({'path_type': 'absolute', 'with_line_number': 0})<cr>
    nnoremap <c-w>Y  :call yankwin#Yank({'path_type': 'relative', 'with_line_number': 1})<cr>
    nnoremap <c-w>gY :call yankwin#Yank({'path_type': 'absolute', 'with_line_number': 1})<cr>

    tnoremap <c-w>y  <c-w>:call yankwin#Yank({'path_type': 'terminal'})<cr>

    nnoremap <c-w><c-p> :call yankwin#Paste({'edit_command': 'edit'})<cr>
    nnoremap <c-w>p     :call yankwin#Paste({'edit_command': 'rightbelow split'})<cr>
    nnoremap <c-w>P     :call yankwin#Paste({'edit_command': 'leftabove split'})<cr>
    nnoremap <c-w>gp    :call yankwin#Paste({'edit_command': 'tab split'})<cr>
    nnoremap <c-w>gP    :call yankwin#Paste({'edit_command': (tabpagenr() - 1).'tab split'})<cr>

    tnoremap <c-w><c-p> <c-w>:call yankwin#Paste({'edit_command': 'edit'})<cr>
    tnoremap <c-w>p     <c-w>:call yankwin#Paste({'edit_command': 'rightbelow split'})<cr>
    tnoremap <c-w>P     <c-w>:call yankwin#Paste({'edit_command': 'leftabove split'})<cr>
    tnoremap <c-w>gp    <c-w>:call yankwin#Paste({'edit_command': 'tab split'})<cr>
    tnoremap <c-w>gP    <c-w>:call yankwin#Paste({'edit_command': (tabpagenr() - 1).'tab split'})<cr>
<

                                             *g:yankwin_default_delete_mappings*
>
    let g:yankwin_default_delete_mappings = 0
<
Default value: 1

Set this to 0 to disable the built-in mappings for deleting, allowing you to
set your own. Here's a complete list of them -- change the left-hand sides to
whatever set of mappings you prefer:
>
    nnoremap <c-w>d  :call yankwin#Delete({'path_type': 'relative', 'with_line_number': 0})<cr>
    nnoremap <c-w>gd :call yankwin#Delete({'path_type': 'absolute', 'with_line_number': 0})<cr>
    nnoremap <c-w>D  :call yankwin#Delete({'path_type': 'relative', 'with_line_number': 1})<cr>
    nnoremap <c-w>gD :call yankwin#Delete({'path_type': 'absolute', 'with_line_number': 1})<cr>
<

                                               *g:yankwin_default_yank_mappings*
>
    let g:yankwin_default_yank_mappings = 0
<
Default value: 1

Set this to 0 to disable the built-in yank mappings, allowing you to set your
own. Here's a complete list of them -- change the left-hand sides to whatever
set of mappings you prefer:
>
    nnoremap <c-w>y  :call yankwin#Yank({'path_type': 'relative', 'with_line_number': 0})<cr>
    nnoremap <c-w>gy :call yankwin#Yank({'path_type': 'absolute', 'with_line_number': 0})<cr>
    nnoremap <c-w>Y  :call yankwin#Yank({'path_type': 'relative', 'with_line_number': 1})<cr>
    nnoremap <c-w>gY :call yankwin#Yank({'path_type': 'absolute', 'with_line_number': 1})<cr>
<
                                              *g:yankwin_default_paste_mappings*
>
    let g:yankwin_default_paste_mappings = 0
<
Default value: 1

Set this to 0 to disable the built-in paste mappings, allowing you to set your own.
Here's a complete list of them -- change the left-hand sides to whatever set
of mappings you prefer:
>
    nnoremap <c-w><c-p> :call yankwin#Paste({'edit_command': 'edit'})<cr>
    nnoremap <c-w>p     :call yankwin#Paste({'edit_command': 'rightbelow split'})<cr>
    nnoremap <c-w>P     :call yankwin#Paste({'edit_command': 'leftabove split'})<cr>
    nnoremap <c-w>gp    :call yankwin#Paste({'edit_command': 'tab split'})<cr>
    nnoremap <c-w>gP    :call yankwin#Paste({'edit_command': (tabpagenr() - 1).'tab split'})<cr>
<
Note that you can create a different mapping by providing a different
"edit_command" to the `yankwin#Paste` function. If you wanted to create
mappings to paste in a vertical split, you could add something like this to
your vimrc:
>
    nnoremap <c-w>vp :call yankwin#Paste({'edit_command': 'rightbelow vertical split'})<cr>
    nnoremap <c-w>vP :call yankwin#Paste({'edit_command': 'leftabove vertical split'})<cr>
<

                                            *g:yankwin_only_allow_pasting_paths*
>
    let g:yankwin_only_allow_pasting_paths = 0
<
Default value: 1

If this is set to 1 (the default), the plugin will try to guard you from
accidentally pasting something that isn't a filename. If the contents of the
register you're pasting from don't look like a filename (Using the 'isfname'
pattern), the plugin will error out. If this is unreliable for you for some
reason, set it to 0 to disable the check (and consider opening an issue).


                                                    *g:yankwin_paste_processors*
>
    let g:yankwin_paste_processors = {
        \ '\(file\):\(line\):\(col\)': {'path': '\1', 'line': '\2', 'col': '\3'}
        \ }
<
This |dict| contains a set of patterns to match the incoming file path to. If
any of the patterns matches, the dict it points is used to get the path,
linenumber and column to jump to.

As an example, if you'd like to paste a filepath like "filename.rb:5:2", which
would point to the 2nd column of the 5th line of "filename.rb", the plugin
will parse that and jump to that location in that file. This is done by using
a substition like the above.

The pattern for that is: `^\(.\{-}\):\(\d\+\)\%(:\(\d\+\)\)\?`

This might seem a bit weird if you're not used to Vim-flavored regex, but
it is what it is.

If you'd rather the plugin didn't try to be smart, you can set this variable
to `{}` to avoid any kind of processing on the pasted file path. If you'd like
to use the existing patterns, and add to them, use the setting
|g:yankwin_custom_paste_processors|

                                                      *g:yankwin_yank_clipboard*
>
    let g:yankwin_yank_clipboard = 'unnamed,unnamedplus'
<
Default value: ''

The plugin respects the value of the global |clipboard| setting, so it will
use either the "*" or "+" clipboard depending on it. However, if you'd like to
override it only for this plugin, you can set this variable to its desired
value.

As an example:
>
    " normally, yank to (and paste from) the * clipboard:
    set clipboard=unnamed

    " with yankwin, yank to both clipboards:
    let g:yankwin_yank_clipboard = 'unnamed,unnamedplus'
<

                                             *g:yankwin_custom_paste_processors*
>
    let g:yankwin_custom_paste_processors = {
        \ '\(file\):\(line\):\(col\)': {'path': '\1', 'line': '\2', 'col': '\3'}
        \ }
<
Default value: {}

If you'd like to use the built-in paste processors, and add some of your own,
you can use this variable. For the syntax of the patterns, either take a look
at the source code in `plugin/yankwin.vim`, or read above in the explanation
for |g:yankwin_paste_processors| (ideally, both).


==============================================================================
ISSUES                                                          *yankwin-issues*

Any issues and suggestions are very welcome on the github bugtracker:
https://github.com/AndrewRadev/yankwin.vim/issues


vim:tw=78:sw=4:ft=help:norl:
